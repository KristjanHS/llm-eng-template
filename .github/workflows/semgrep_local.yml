name: Local Semgrep

on:
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write

jobs:
  local_semgrep:
    name: Local Semgrep Scan (isolated env)
    # Run ONLY under local Act; never on GitHub
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Run Semgrep scan (no metrics) via uvx
        run: |
          uvx --from semgrep semgrep ci \
            --config auto \
            --metrics off \
            --sarif \
            --output semgrep_local.sarif

      - name: Summarize Semgrep findings to logs
        if: ${{ always() }}
        run: |
          python - << 'PY'
          import json
          import os
          import sys

          path = "semgrep_local.sarif"
          if not os.path.exists(path):
              print("Semgrep findings: 0 (no semgrep_local.sarif found)")
              sys.exit(0)

          try:
              with open(path, "r", encoding="utf-8") as f:
                  sarif = json.load(f)
              runs = sarif.get("runs") or []
              results = (runs[0].get("results") if runs else []) or []
              print(f"\nSemgrep findings: {len(results)}")
              for i, r in enumerate(results, start=1):
                  rule_id = r.get("ruleId") or (r.get("rule") or {}).get("id") or "unknown-rule"
                  level = r.get("level") or (r.get("properties") or {}).get("severity") or "note"
                  message = (r.get("message") or {}).get("text") or "(no message)"
                  loc = ((r.get("locations") or [None])[0] or {}).get("physicalLocation") or {}
                  file = (loc.get("artifactLocation") or {}).get("uri") or "unknown-file"
                  line = (loc.get("region") or {}).get("startLine") or 1
                  print(f"{i}. [{level}] {rule_id} at {file}:{line} - {message}")
          except Exception as e:
              print(f"Could not parse semgrep_local.sarif: {e}")
          PY

