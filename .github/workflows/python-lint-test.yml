name: CI
# NOTE FOR LOCAL CI (act):
# - The pre-push Git hook (.git/hooks/pre-push) runs these in order:
#     act pull_request -j lint --pull=false --log-prefix-job-id
#     act pull_request -j unit_tests --pull=false --log-prefix-job-id
# - To run this workflow manually with act:
#     act pull_request -j lint
#     act pull_request -j unit_tests
#
# IMPORTANT: Integration and E2E tests require the full Docker stack and are excluded
# from GitHub CI runs entirely. They only run locally via act (nektos/act) on manual
# workflow_dispatch or scheduled runs. This prevents CI failures due to GitHub runner
# limitations with Docker services.

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]
  workflow_dispatch: {} # Allows manual triggering for slow tests
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM for slow tests

env:
  # Default to CPU-only PyTorch wheels for smaller images and reliable installs
  PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
  # Enforce teardown of docker services in CI to avoid leftovers
  TEARDOWN_DOCKER: "1"
  # Prefer copy to avoid hardlink warnings on some runners/filesystems
  UV_LINK_MODE: copy
  UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache
  UV_PROJECT_ENVIRONMENT: .venv-ci

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Ruff static analysis
        uses: astral-sh/ruff-action@v1
        with:
          version: "0.12.9"
          args: check --fix .
      - name: Ruff formatting check
        uses: astral-sh/ruff-action@v1
        with:
          version: "0.12.9"
          args: format --check .


  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      # Pick the Python you want, without letting setup-uv create .venv
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      # Install uv and enable its cache, but DON'T pass python-version here
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          # keep the glob tight so we don't hash pre-commit's vendor copies
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-local-path: ${{ github.workspace }}/.uv-cache
      - name: Sync test environment
        # uses .venv-ci (not .venv)
        run: uv sync --group test --frozen
      - name: Verify dependency health
        run: uv pip check
      - name: Prepare reports directories
        run: |
          mkdir -p reports
      - name: Run unit tests
        run: |
          # Fastest suite: run only unit tests (no external services)
          uv run -m pytest tests/unit -n auto --maxfail=1 -q --junitxml=reports/junit.xml
      - name: Upload unit test reports
        # Skip under act (local GitHub Actions emulator) because ACTIONS_RUNTIME_TOKEN is not available.
        # On real GitHub runners, this will upload the reports/ directory as a build artifact.
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-unit
          path: reports/

  pyright:
    name: Pyright
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      # Install uv and enable its cache, but DON'T pass python-version here
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          # keep the glob tight so we don't hash pre-commit's vendor copies
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-local-path: ${{ github.workspace }}/.uv-cache
      - name: Sync dev environment
        run: uv sync --group dev --frozen
      - name: Pyright type checking
        run: uv run pyright --project ./pyrightconfig.json


  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit_tests
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      # Install uv and enable its cache, but DON'T pass python-version here
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          # keep the glob tight so we don't hash pre-commit's vendor copies
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-local-path: ${{ github.workspace }}/.uv-cache
      - name: Sync test environment
        run: uv sync --group test --frozen
      - name: Build and start services
        run: docker compose -f docker/docker-compose.yml up -d --build
      - name: Wait for services to be ready
        run: |
          echo "Waiting for Weaviate..."
          timeout 180s bash -c 'until curl -s http://localhost:8080/v1/.well-known/ready; do sleep 5; done'
          echo "Waiting for Ollama..."
          timeout 180s bash -c 'until docker compose -f docker/docker-compose.yml exec -T ollama ollama list; do sleep 5; done'
      - name: Prepare reports directories
        run: mkdir -p reports
      - name: Run integration tests
        run: >-
          uv run -m pytest tests/integration -q --junitxml=reports/junit_integration.xml
      - name: Tear down services
        if: always()
        run: docker compose -f docker/docker-compose.yml down -v
      - name: Upload integration test reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-integration
          path: reports/

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit_tests
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      # Install uv and enable its cache, but DON'T pass python-version here
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          # keep the glob tight so we don't hash pre-commit's vendor copies
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-local-path: ${{ github.workspace }}/.uv-cache
      - name: Sync test environment
        run: uv sync --group test --frozen
      - name: Build and start services
        run: docker compose -f docker/docker-compose.yml up -d --build
      - name: Wait for services to be ready
        run: |
          echo "Waiting for Weaviate..."
          timeout 180s bash -c 'until curl -s http://localhost:8080/v1/.well-known/ready; do sleep 5; done'
          echo "Waiting for Ollama..."
          timeout 180s bash -c 'until docker compose -f docker/docker-compose.yml exec -T ollama ollama list; do sleep 5; done'
      - name: Prepare reports directories
        run: mkdir -p reports
      - name: Run E2E tests
        run: >-
          uv run -m pytest tests/e2e -q --junitxml=reports/junit_e2e.xml
      - name: Tear down services
        if: always()
        run: docker compose -f docker/docker-compose.yml down -v
      - name: Upload E2E test reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-e2e
          path: reports/
